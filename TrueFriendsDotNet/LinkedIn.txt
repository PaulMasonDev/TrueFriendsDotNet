.NET True Friends Rebuild
#1: How do controllers in MVC work/Controller Basics?
You can think of a controller as a file that contains directions for where to send the user on your website depending upon what is in the endpoint. In MERN, this would look like the individual files in your routes directory on the backend with multiple app.get, app.post, etc. requests.

Within each controller file (back to .NET), you will declare a class with the naming convention of 'ControllerName' followed by 'Controller'. So a 'Friends' controller would be named 'FriendsController' and so forth.

Within this class are your 'IActionResult's, which are named by what you are putting in the endpoint. So if I wanted to send the user to '/Friends/AddFriend' my IActionResult would be named 'AddFriend'.

There's a bit more to it, but I hope this helps. Until next time!

Happy Coding!

.NET True Friends Rebuild
#2: What is MVC? What are Areas? What are they used for?

(MVC, Think --> Model is kind of like a Schema in Mongoose, View is a User Facing Page that uses the model, and Controller is Routing--see post #1).

The use of "Areas" is a folder structure where you will place Controllers and Views for each Area you create.
I've chosen to place all of my models in a separate project within the solution to keep things tidy.

To start, I will have a "User" area where users will access their list of friends with occassions, and gift ideas.
Later on for example, I could add an "Admin" area, where I can place all the controllers and views for Admin related stuff.

Related to my previous post, the endpoint to access this area might look like "Users/Friends/AddFriend", so areas are used in the endpoint system of .NET
in conjuction with the appropriate Controller and IActionResults.

I am liking the .NET file structure conventions so far, as the different pieces of your project
are easy to keep track of.

Until Next Time! Happy Coding!

#merntodotnet #learning

2/22/2021
.NET True Friends Rebuild
#3: Migrations

So migrations are a way of easily taking your models setup in C# code, and generating SQL-like code that
can be used to update your table structure in the database. From what I have learned, the alternative to this would
writing and executing an SQL script following a similar flow as the code that is generated.  Migrations definitely help speed along the process,
but I can see how this method of database initialization could be overused, and have the potential for your own confusion along the way,
if you don't know exactly what it is doing.

When looking at the migration file, you can see how the code looks similar to SQL scripting commands such as "column", "add table", etc...
I definitely want to up my game in SQL, so I'm not sure if I will stick with migrations in the future, but definitely a nice feature.

Until next time! Happy Coding!

https://docs.microsoft.com/en-us/ef/core/managing-schemas/migrations/?tabs=dotnet-core-cli

#merntodotnet #sql #learning

2/23/2021
.NET True Friends Rebuild
#4: Models/Ids/Primary Keys

One thing I noticed when creating my initial "Friend" model in .net, comparing to MERN, is that with Mongo/Mongoose, by default, there is no need to explicitly define
an Id in the Schema, it is autogenerated for you.  With C#/SQL, as far as I can tell, there is a need to define it as one of your properties in your model.
In SQL/C#, you need to set a property explicitly as the "Id" or provide a "Key" attribute above whatever property you want to designate as the primary key. 
(Notice the difference of how the basic Schema/Model are setup in MERN/.NET respectively).

A lot more that I didn't go through here, and a lot more to unpack, but I'm having fun as I go! :)

Until next time! Happy Coding!

#merntodotnet #sql #primarykeys #learning

2/24/2021
.NET True Friends Rebuild
#5: Repository Pattern

So the repository pattern is a way of keeping the logic for accessing data in a centralized location that many different
pieces of your project can access.  CRUD operations such as Create and Delete would most often be found in a Repository.

Thinking to where I have seen a similar idea in MERN is in my use of Redux in React.  You create Redux actions which are then
called from whichever component needs to use the specific method.  So instead of writing the same code multiple times in different places,
you simply define the function once, and call it whenever you need it.  With C#, you will be able to declare classes that act as a repository,
all having different methods that your app/project may need.

Repository Pattern enforces DRY principles, so happy to learn about something that helps with that. :)

Until next time! Happy Coding!

#merntodotnet #learning


